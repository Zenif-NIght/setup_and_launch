<launch>
  <arg name="model" default="waffle_pi" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="spawn_gazebo" default="false" />
  <arg name="namespace" default="" />
  <arg name="x_pos" default="-7.0"/>
  <arg name="y_pos" default="-1.0"/>
  <arg name="z_pos" default=" 0.0"/>
  <arg name="yaw"   default=" 1.57"/>
  <arg name="dynamics_model" default="unicycle_dynamics"/>

  <param name="odom_frame" value="$(arg namespace)/odom" />
  <param name="base_frame" value="$(arg namespace)/base_footprint" />

  <!-- Create the vehicle model for visualization -->
  <include file="$(find turtlebot_launch)/launch/include/description.launch.xml">
    <arg name="model" value="$(arg model)" />
    <arg name="robot_tf_prefix" value="$(arg namespace)/"/>
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />    
  </node>

  <!-- Create mapping from odom frame to map frame" -->
  <node pkg="turtlebot_sim" type="simple_map_tf" name="map_to_odom" output="screen">
    <param name="x_pos" type="double" value="$(arg x_pos)" />
    <param name="y_pos" type="double" value="$(arg y_pos)" />
    <param name="z_pos" type="double" value="$(arg z_pos)" />
    <param name="yaw" type="double" value="$(arg yaw)" />
  </node>

  <!-- Simulate vehicle dynamics -->
  <group unless="$(arg spawn_gazebo)">
    <node pkg="dynamic_models" type="$(arg dynamics_model)" name="unicyle_node" output="screen">
    </node>

    <node pkg="turtlebot_sim" type="turtlebot_vehicle" name="turtlebot_vehicle" output="screen"/>
  </group>

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg namespace) -x
    $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw)
    -param robot_description" if="$(arg spawn_gazebo)"/>
</launch>
